// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//////////// auth /////////

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/////////// tasks //////////

model Task {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  title         String        @db.VarChar(128)
  description   String        @db.VarChar(1024)
  dueDate       DateTime
  taskType      TaskType      @default(GENERAL)
  completed     Boolean       @default(false)
  priority      TaskPriority  @default(MEDIUM)
  shoppingList  ShoppingList?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@index([userId])
}

model ShoppingList {
  id            String          @id @default(cuid())
  taskId        String          @unique
  task          Task            @relation(references: [id], fields: [taskId], onDelete: Cascade)
  items         ShoppingItem[]
}

model ShoppingItem {
  id              String        @id @default(cuid())
  name            String        @db.VarChar(128)
  quantity        Int
  shoppingListId  String
  shoppingList    ShoppingList  @relation(references: [id], fields: [shoppingListId], onDelete: Cascade)
}

enum TaskType {
  SHOPPING
  BILLS
  CLEANING
  GENERAL
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
